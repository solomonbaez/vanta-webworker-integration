From ea669eb5d175c2be5b9cacdf9830e8a744a5b8e0 Mon Sep 17 00:00:00 2001
From: Dustin Brett <dustinbrett@gmail.com>
Date: Wed, 13 Oct 2021 22:27:22 -0700
Subject: [PATCH] Various tweaks

---
 README.md                        |    6 +-
 src/_base.js                     |  144 +-
 src/_shaderBase.js               |    6 +-
 src/helpers.js                   |    2 +-
 src/vanta.waves.js               |  109 +-
 vendor/GPUComputationRenderer.js |    4 +-
 webpack.config.js                |    9 +-
 9 files changed, 2070 insertions(+), 5403 deletions(-)

diff --git a/README.md b/README.md
index 78e66e4..b164151 100644
--- a/README.md
+++ b/README.md
@@ -87,7 +87,7 @@ effect.destroy() // e.g. call this in React's componentWillUnmount
 ```js
 import React from 'react'
 import BIRDS from 'vanta/dist/vanta.birds.min'
-// Make sure window.THREE is defined, e.g. by including three.min.js in the document head using a <script> tag
+// Make sure globalThis.THREE is defined, e.g. by including three.min.js in the document head using a <script> tag
 
 class MyComponent extends React.Component {
   constructor() {
@@ -116,7 +116,7 @@ class MyComponent extends React.Component {
 ```js
 import React, { useState, useEffect, useRef } from 'react'
 import BIRDS from 'vanta/dist/vanta.birds.min'
-// Make sure window.THREE is defined, e.g. by including three.min.js in the document head using a <script> tag
+// Make sure globalThis.THREE is defined, e.g. by including three.min.js in the document head using a <script> tag
 
 const MyComponent = (props) => {
   const [vantaEffect, setVantaEffect] = useState(0)
@@ -148,7 +148,7 @@ const MyComponent = (props) => {
 
 <script>
 import BIRDS from 'vanta/src/vanta.birds'
-// Make sure window.THREE is defined, e.g. by including three.min.js in the document head using a <script> tag
+// Make sure globalThis.THREE is defined, e.g. by including three.min.js in the document head using a <script> tag
 
 export default {
   mounted() {
diff --git a/src/_base.js b/src/_base.js
index 9a2b83f..3cd1105 100644
--- a/src/_base.js
+++ b/src/_base.js
@@ -1,10 +1,10 @@
 import {mobileCheck, q, color2Hex, clearThree} from './helpers.js'
-// const DEBUGMODE = window.location.toString().indexOf('VANTADEBUG') !== -1
+// const DEBUGMODE = globalThis.location.toString().indexOf('VANTADEBUG') !== -1
 
-const win = typeof window == 'object'
-let THREE = (win && window.THREE) || {}
-if (win && !window.VANTA) window.VANTA = {}
-const VANTA = (win && window.VANTA) || {}
+const win = typeof globalThis == 'object'
+let THREE = (win && globalThis.THREE) || {}
+if (win && !globalThis.VANTA) globalThis.VANTA = {}
+const VANTA = (win && globalThis.VANTA) || {}
 VANTA.register = (name, Effect) => {
   return VANTA[name] = (opts) => new Effect(opts)
 }
@@ -60,7 +60,7 @@ VANTA.VantaBase = class VantaBase {
       scaleMobile: 1,
     }, defaultOptions)
 
-    if (userOptions instanceof HTMLElement || typeof userOptions === 'string') {
+    if ((typeof HTMLElement !== "undefined" && userOptions instanceof HTMLElement) || typeof userOptions === 'string') {
       userOptions = {el: userOptions}
     }
     Object.assign(this.options, userOptions)
@@ -70,19 +70,22 @@ VANTA.VantaBase = class VantaBase {
     }
 
     // Set element
-    this.el = this.options.el
-    if (this.el == null) {
-      error("Instance needs \"el\" param!")
-    } else if (!(this.options.el instanceof HTMLElement)) {
-      const selector = this.el
-      this.el = q(selector)
-      if (!this.el) {
-        error("Cannot find element", selector)
-        return
+    if (!this.options.canvas) {
+      this.el = this.options.el
+      if (this.el == null) {
+        error("Instance needs \"el\" param!")
+      } else if (typeof HTMLElement !== "undefined" && !(this.options.el instanceof HTMLElement)) {
+        const selector = this.el
+        this.el = q(selector)
+        if (!this.el) {
+          error("Cannot find element", selector)
+          return
+        }
       }
+
+      this.prepareEl()
     }
 
-    this.prepareEl()
     this.initThree()
     this.setSize() // Init needs size
 
@@ -91,12 +94,14 @@ VANTA.VantaBase = class VantaBase {
     } catch (e) {
       // FALLBACK - just use color
       error('Init error', e)
-      if (this.renderer && this.renderer.domElement) {
-        this.el.removeChild(this.renderer.domElement)
-      }
-      if (this.options.backgroundColor) {
-        console.log('[VANTA] Falling back to backgroundColor')
-        this.el.style.background = color2Hex(this.options.backgroundColor)
+      if (!this.options.canvas) {
+        if (this.renderer && this.renderer.domElement) {
+          this.el.removeChild(this.renderer.domElement)
+        }
+        if (this.options.backgroundColor) {
+          console.log('[VANTA] Falling back to backgroundColor')
+          this.el.style.background = color2Hex(this.options.backgroundColor)
+        }
       }
       return
     }
@@ -106,22 +111,25 @@ VANTA.VantaBase = class VantaBase {
     this.resize()
     this.animationLoop()
 
-    // Event listeners
-    const ad = window.addEventListener
-    ad('resize', this.resize)
-    window.requestAnimationFrame(this.resize) // Force a resize after the first frame
+    globalThis.requestAnimationFrame(this.resize) // Force a resize after the first frame
 
-    // Add event listeners on window, because this element may be below other elements, which would block the element's own mousemove event
-    if (this.options.mouseControls) {
-      ad('scroll', this.windowMouseMoveWrapper)
-      ad('mousemove', this.windowMouseMoveWrapper)
-    }
-    if (this.options.touchControls) {
-      ad('touchstart', this.windowTouchWrapper)
-      ad('touchmove', this.windowTouchWrapper)
-    }
-    if (this.options.gyroControls) {
-      ad('deviceorientation', this.windowGyroWrapper)
+    if (typeof window !== "undefined") {
+      // Event listeners
+      const ad = window.addEventListener
+      ad('resize', this.resize)
+
+      // Add event listeners on window, because this element may be below other elements, which would block the element's own mousemove event
+      if (this.options.mouseControls) {
+        ad('scroll', this.windowMouseMoveWrapper)
+        ad('mousemove', this.windowMouseMoveWrapper)
+      }
+      if (this.options.touchControls) {
+        ad('touchstart', this.windowTouchWrapper)
+        ad('touchmove', this.windowTouchWrapper)
+      }
+      if (this.options.gyroControls) {
+        ad('deviceorientation', this.windowGyroWrapper)
+      }
     }
   }
 
@@ -160,18 +168,6 @@ VANTA.VantaBase = class VantaBase {
     }
   }
 
-  applyCanvasStyles(canvasEl, opts={}){
-    Object.assign(canvasEl.style, {
-      position: 'absolute',
-      zIndex: 0,
-      top: 0,
-      left: 0,
-      background: ''
-    })
-    Object.assign(canvasEl.style, opts)
-    canvasEl.classList.add('vanta-canvas')
-  }
-
   initThree() {
     if (!THREE.WebGLRenderer) {
       console.warn("[VANTA] No THREE defined on window")
@@ -179,11 +175,21 @@ VANTA.VantaBase = class VantaBase {
     }
     // Set renderer
     this.renderer = new THREE.WebGLRenderer({
-      alpha: true,
-      antialias: true
+      alpha: false,
+      antialias: true,
+      canvas: this.options.canvas,
+      depth: false,
+      stencil: false,
+      powerPreference: "high-performance"
     })
-    this.el.appendChild(this.renderer.domElement)
-    this.applyCanvasStyles(this.renderer.domElement)
+    if (!this.options.canvas) {
+      this.el.appendChild(this.renderer.domElement);
+    } else {
+      this.options.canvas.style = {
+        height: this.options.canvas.height,
+        width: this.options.canvas.width
+      };
+    }
     if (isNaN(this.options.backgroundAlpha)) {
       this.options.backgroundAlpha = 1
     }
@@ -268,8 +274,8 @@ VANTA.VantaBase = class VantaBase {
     } else if (this.options.scale) {
       this.scale = this.options.scale
     }
-    this.width = Math.max(this.el.offsetWidth, this.options.minWidth)
-    this.height = Math.max(this.el.offsetHeight, this.options.minHeight)
+    this.width = Math.max((this.options.canvas ? this.options.canvas.width : this.el.offsetWidth), this.options.minWidth)
+    this.height = Math.max((this.options.canvas ? this.options.canvas.height : this.el.offsetHeight), this.options.minHeight)
   }
   initMouse() {
     // Init mouseX and mouseY
@@ -291,12 +297,14 @@ VANTA.VantaBase = class VantaBase {
     }
     if (this.renderer) {
       this.renderer.setSize(this.width, this.height)
-      this.renderer.setPixelRatio(window.devicePixelRatio / this.scale)
+      this.renderer.setPixelRatio((this.options.devicePixelRatio || globalThis.devicePixelRatio || 1) / this.scale)
     }
     typeof this.onResize === "function" ? this.onResize() : void 0
   }
 
   isOnScreen() {
+    if (typeof window === "undefined") return true;
+
     const elHeight = this.el.offsetHeight
     const elRect = this.el.getBoundingClientRect()
     const scrollTop = (window.pageYOffset ||
@@ -330,7 +338,7 @@ VANTA.VantaBase = class VantaBase {
     }
 
     // Only animate if element is within view
-    if (this.isOnScreen() || this.options.forceAnimate) {
+    if (this.options.forceAnimate || this.isOnScreen()) {
       if (typeof this.onUpdate === "function") {
         this.onUpdate()
       }
@@ -343,7 +351,7 @@ VANTA.VantaBase = class VantaBase {
       if (this.fps && this.fps.update) this.fps.update()
       if (typeof this.afterRender === "function") this.afterRender()
     }
-    return this.req = window.requestAnimationFrame(this.animationLoop)
+    return this.req = globalThis.requestAnimationFrame(this.animationLoop)
   }
 
   // setupControls() {
@@ -378,21 +386,23 @@ VANTA.VantaBase = class VantaBase {
     if (typeof this.onDestroy === "function") {
       this.onDestroy()
     }
-    const rm = window.removeEventListener
-    rm('touchstart', this.windowTouchWrapper)
-    rm('touchmove', this.windowTouchWrapper)
-    rm('scroll', this.windowMouseMoveWrapper)
-    rm('mousemove', this.windowMouseMoveWrapper)
-    rm('deviceorientation', this.windowGyroWrapper)
-    rm('resize', this.resize)
-    window.cancelAnimationFrame(this.req)
+    if (typeof window !== "undefined") {
+      const rm = window.removeEventListener
+      rm('touchstart', this.windowTouchWrapper)
+      rm('touchmove', this.windowTouchWrapper)
+      rm('scroll', this.windowMouseMoveWrapper)
+      rm('mousemove', this.windowMouseMoveWrapper)
+      rm('deviceorientation', this.windowGyroWrapper)
+      rm('resize', this.resize)
+    }
+    globalThis.cancelAnimationFrame(this.req)
 
     const scene = this.scene
     if (scene && scene.children) {
       clearThree(scene)
     }
     if (this.renderer) {
-      if (this.renderer.domElement) {
+      if (this.renderer.domElement && !this.options.canvas) {
         this.el.removeChild(this.renderer.domElement)
       }
       this.renderer = null
diff --git a/src/_shaderBase.js b/src/_shaderBase.js
index 577c383..8ec0ee4 100644
--- a/src/_shaderBase.js
+++ b/src/_shaderBase.js
@@ -1,8 +1,8 @@
 import VantaBase from './_base.js'
 export {VANTA} from './_base.js'
 
-const win = typeof window == 'object'
-let THREE = win && window.THREE
+const win = typeof globalThis == 'object'
+let THREE = win && globalThis.THREE
 
 export default class ShaderBase extends VantaBase {
   constructor(userOptions) {
@@ -26,7 +26,7 @@ export default class ShaderBase extends VantaBase {
       },
       iDpr: {
         type: "f",
-        value: window.devicePixelRatio || 1
+        value: this.options.devicePixelRatio || globalThis.devicePixelRatio || 1
       },
       iMouse: {
         type: "v2",
diff --git a/src/helpers.js b/src/helpers.js
index 86bc19f..4a28bdd 100644
--- a/src/helpers.js
+++ b/src/helpers.js
@@ -4,7 +4,7 @@ Number.prototype.clamp = function(min, max) { return Math.min(Math.max(this, min
 
 export function mobileCheck(){
   if (typeof navigator !== 'undefined') {
-    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth < 600
+    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || globalThis.innerWidth < 600
   }
   return null
 }
diff --git a/src/vanta.waves.js b/src/vanta.waves.js
index 42bdf2d..444a8b2 100644
--- a/src/vanta.waves.js
+++ b/src/vanta.waves.js
@@ -1,7 +1,7 @@
 import VantaBase, { VANTA } from './_base.js'
 import {rn,ri,sample} from './helpers.js'
 
-let THREE = (typeof window == 'object' && window.THREE)
+let THREE = (typeof globalThis === 'object' && globalThis.THREE)
 
 const defaultOptions = {
   color: 0x005588,
@@ -27,8 +27,8 @@ class Waves extends VantaBase {
       color: this.options.color,
       shininess: this.options.shininess,
       flatShading: true,
-      vertexColors: THREE.FaceColors, // Allow coloring individual faces
-      side: THREE.DoubleSide
+      side: THREE.DoubleSide,
+      ...(this.options.material && this.options.material.options || {})
     };
     return new THREE.MeshPhongMaterial(options);
   }
@@ -37,57 +37,48 @@ class Waves extends VantaBase {
     let i, j;
     const CELLSIZE = 18;
     const material = this.getMaterial();
-    const geometry = new THREE.Geometry();
+    const geometry = new THREE.BufferGeometry();
 
     // Add vertices
     this.gg = [];
-    for (i=0; i<=this.ww; i++){
+    const points = [];
+    for (i=0; i<=(this.options.ww || this.ww); i++){
       this.gg[i] = [];
-      for (j=0; j<=this.hh; j++){
-        const id = geometry.vertices.length;
+      for (j=0; j<=(this.options.hh || this.hh); j++){
+        const id = points.length;
         const newVertex = new THREE.Vector3(
-          (i - (this.ww * 0.5)) * CELLSIZE,
+          (i - ((this.options.ww || this.ww) * 0.5)) * CELLSIZE,
           rn(0, this.waveNoise) - 10,
-          ((this.hh * 0.5) - j) * CELLSIZE
+          (((this.options.hh || this.hh) * 0.5) - j) * CELLSIZE
         );
-        geometry.vertices.push(newVertex);
+        points.push(newVertex);
         this.gg[i][j] = id;
       }
     }
+    geometry.setFromPoints(points);
 
     // Add faces
     // a b
     // c d <-- Looking from the bottom right point
-    for (i=1; i<=this.ww; i++){
-      for (j=1; j<=this.hh; j++){
-        let face1, face2
+    const indices = [];
+    for (i=1; i<=(this.options.ww || this.ww); i++){
+      for (j=1; j<=(this.options.hh || this.hh); j++){
         const d = this.gg[i][j]
         const b = this.gg[i][j-1]
         const c = this.gg[i-1][j]
         const a = this.gg[i-1][j-1]
         if (ri(0,1)) {
-          face1 = new THREE.Face3( a, b, c )
-          face2 = new THREE.Face3( b, c, d )
+          indices.push(a, b, c, b, c, d)
         } else {
-          face1 = new THREE.Face3( a, b, d )
-          face2 = new THREE.Face3( a, c, d )
+          indices.push(a, b, d, a, c, d)
         }
-        geometry.faces.push( face1, face2 )
       }
     }
+    geometry.setIndex(indices);
 
     this.plane = new THREE.Mesh(geometry, material);
     this.scene.add(this.plane);
 
-    // WIREFRAME
-    // lightColor = 0x55aaee
-    // darkColor = 0x225577
-    // thresholdAngle = 2
-    // geo = new THREE.EdgesGeometry(geometry, thresholdAngle)
-    // mat = new THREE.LineBasicMaterial( { color: lightColor, linewidth: 2 } )
-    // @wireframe = new THREE.LineSegments( geo, mat )
-    // @scene.add( @wireframe )
-
     // LIGHTS
     const ambience = new THREE.AmbientLight( 0xffffff, 0.9 );
     this.scene.add(ambience);
@@ -98,9 +89,10 @@ class Waves extends VantaBase {
 
     // CAMERA
     this.camera = new THREE.PerspectiveCamera(
-      35,
+      this.options.camera && this.options.camera.fov || 35,
       this.width / this.height,
-      50, 10000);
+      this.options.camera && this.options.camera.near || 50,
+      this.options.camera && this.options.camera.far || 10000);
 
     const xOffset = -10;
     const zOffset = -10;
@@ -113,7 +105,23 @@ class Waves extends VantaBase {
   onUpdate() {
     // Update options
     let diff;
-    this.plane.material.color.set(this.options.color);
+    if (typeof this.options.hue !== "undefined") {
+      if (this.options.hue >= 360) {
+        this.countDown = true;
+      } else if (this.options.hue <= 0) {
+        this.countDown = false;
+      }
+
+      const updateColor = this.updateTick === this.options.colorCycleSpeed;
+
+      this.updateTick = updateColor || typeof this.updateTick === "undefined" ? 0 : this.updateTick + 1;
+
+      if (updateColor) {
+        const hue = this.countDown ? --this.options.hue : ++this.options.hue;
+
+        this.plane.material.color.set(`hsl(${hue}, ${this.options.saturation}%, ${this.options.lightness}%)`);
+      }
+    }
     this.plane.material.shininess = this.options.shininess;
     this.camera.ox = this.cameraPosition.x / this.options.zoom;
     this.camera.oy = this.cameraPosition.y / this.options.zoom;
@@ -139,41 +147,26 @@ class Waves extends VantaBase {
 
     c.lookAt( this.cameraTarget );
 
-    // Fix flickering problems
-    // c.near = Math.max((c.position.y * 0.5) - 20, 1);
-    // c.updateMatrix();
-
     // WAVES
-    for (let i = 0; i < this.plane.geometry.vertices.length; i++) {
-      const v = this.plane.geometry.vertices[i];
-      if (!v.oy) { // INIT
-        v.oy = v.y;
+    this.oy = this.oy || {};
+    for (let i = 0; i < this.plane.geometry.attributes.position.array.length; i += 3) {
+      if (!this.oy[i]) { // INIT
+        this.oy[i] = this.plane.geometry.attributes.position.array[i + 1];
       } else {
+        const vX = this.plane.geometry.attributes.position.array[i];
+        const vZ = this.plane.geometry.attributes.position.array[i + 2];
         const s = this.options.waveSpeed;
-        const crossChop = Math.sqrt(s) * Math.cos(-v.x - (v.z*0.7)); // + s * (i % 229) / 229 * 5
-        const delta = Math.sin((((s*this.t*0.02) - (s*v.x*0.025)) + (s*v.z*0.015) + crossChop));
+        const crossChop = Math.sqrt(s) * Math.cos(-vX - (vZ*0.7));
+        const delta = Math.sin((((s*this.t*0.02) - (s*vX*0.025)) + (s*vZ*0.015) + crossChop));
         const trochoidDelta = Math.pow(delta + 1, 2) / 4;
-        v.y = v.oy + (trochoidDelta * this.options.waveHeight);
+
+        this.plane.geometry.attributes.position.array[i + 1] = this.oy[i] + (trochoidDelta * this.options.waveHeight);
       }
     }
 
-      // @wireframe.geometry.vertices[i].y = v.y
-
-    this.plane.geometry.dynamic = true;
-    this.plane.geometry.computeFaceNormals();
-    this.plane.geometry.verticesNeedUpdate = true;
-    this.plane.geometry.normalsNeedUpdate = true;
-
-    // @scene.remove( @wireframe )
-    // geo = new THREE.EdgesGeometry(@plane.geometry)
-    // mat = new THREE.LineBasicMaterial( { color: 0x55aaee, linewidth: 2} )
-    // @wireframe = new THREE.LineSegments( geo, mat )
-    // @scene.add( @wireframe )
-
-    if (this.wireframe) {
-      this.wireframe.geometry.fromGeometry(this.plane.geometry);
-      this.wireframe.geometry.computeFaceNormals();
-    }
+    this.plane.geometry.attributes.position.setUsage(THREE.DynamicDrawUsage);
+    this.plane.geometry.computeVertexNormals();
+    this.plane.geometry.attributes.position.needsUpdate = true;
   }
 
   onMouseMove(x,y) {
diff --git a/vendor/GPUComputationRenderer.js b/vendor/GPUComputationRenderer.js
index 5b63e81..629ed18 100644
--- a/vendor/GPUComputationRenderer.js
+++ b/vendor/GPUComputationRenderer.js
@@ -1,5 +1,5 @@
-const win = typeof window == 'object'
-let THREE = win && window.THREE
+const win = typeof globalThis == 'object'
+let THREE = win && globalThis.THREE
 let {
 	Camera,
 	ClampToEdgeWrapping,
diff --git a/webpack.config.js b/webpack.config.js
index 2c26057..11a56c7 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -19,6 +19,7 @@ for (let i = 0; i < srcFiles.length; i++) {
 }
 
 module.exports = {
+  mode: 'production',
   entry: entries,
   // watch: true,
   output: {
@@ -38,5 +39,11 @@ module.exports = {
   },
   plugins: [
     new webpack.optimize.ModuleConcatenationPlugin(),
-  ]
+  ],
+  devServer: {
+    static: {
+      directory: path.join(__dirname, ''),
+    },
+    compress: true,
+  }
 }
\ No newline at end of file
-- 
2.36.1.windows.1

